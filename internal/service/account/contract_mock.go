// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package account is a generated GoMock package.
package account

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	account "github.com/xloki21/bonus-service/internal/entity/account"
)

// MockaccountRepository is a mock of accountRepository interface.
type MockaccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockaccountRepositoryMockRecorder
}

// MockaccountRepositoryMockRecorder is the mock recorder for MockaccountRepository.
type MockaccountRepositoryMockRecorder struct {
	mock *MockaccountRepository
}

// NewMockaccountRepository creates a new mock instance.
func NewMockaccountRepository(ctrl *gomock.Controller) *MockaccountRepository {
	mock := &MockaccountRepository{ctrl: ctrl}
	mock.recorder = &MockaccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountRepository) EXPECT() *MockaccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockaccountRepository) Create(arg0 context.Context, arg1 account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockaccountRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockaccountRepository)(nil).Create), arg0, arg1)
}

// Credit mocks base method.
func (m *MockaccountRepository) Credit(arg0 context.Context, arg1 account.UserID, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Credit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Credit indicates an expected call of Credit.
func (mr *MockaccountRepositoryMockRecorder) Credit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Credit", reflect.TypeOf((*MockaccountRepository)(nil).Credit), arg0, arg1, arg2)
}

// Debit mocks base method.
func (m *MockaccountRepository) Debit(arg0 context.Context, arg1 account.UserID, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Debit indicates an expected call of Debit.
func (mr *MockaccountRepositoryMockRecorder) Debit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debit", reflect.TypeOf((*MockaccountRepository)(nil).Debit), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockaccountRepository) Delete(arg0 context.Context, arg1 account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockaccountRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockaccountRepository)(nil).Delete), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockaccountRepository) FindByID(arg0 context.Context, arg1 account.UserID) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockaccountRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockaccountRepository)(nil).FindByID), arg0, arg1)
}

// GetBalance mocks base method.
func (m *MockaccountRepository) GetBalance(arg0 context.Context, arg1 account.UserID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockaccountRepositoryMockRecorder) GetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockaccountRepository)(nil).GetBalance), arg0, arg1)
}
