// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package order is a generated GoMock package.
package order

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "github.com/xloki21/bonus-service/internal/entity/order"
)

// MockorderRepository is a mock of orderRepository interface.
type MockorderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockorderRepositoryMockRecorder
}

// MockorderRepositoryMockRecorder is the mock recorder for MockorderRepository.
type MockorderRepositoryMockRecorder struct {
	mock *MockorderRepository
}

// NewMockorderRepository creates a new mock instance.
func NewMockorderRepository(ctrl *gomock.Controller) *MockorderRepository {
	mock := &MockorderRepository{ctrl: ctrl}
	mock.recorder = &MockorderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderRepository) EXPECT() *MockorderRepositoryMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockorderRepository) Register(arg0 context.Context, arg1 order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockorderRepositoryMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockorderRepository)(nil).Register), arg0, arg1)
}
